{"version":3,"sources":["theme.js","moq-blue.gif","github.svg","discord.svg","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["theme","extendTheme","config","initialColorMode","useSystemColorMode","App","React","useState","height","window","innerHeight","width","innerWidth","dimensions","setDimensions","useEffect","addEventListener","textAlign","fontSize","minH","p","justifyContent","justifyItems","spacing","alignSelf","style","fontFamily","color","href","src","github","class","discord","moq","alt","borderRadius","align","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","location","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oMAQeA,EADDC,YAAY,CAAEC,OALb,CACXC,iBAAkB,OAClBC,oBAAoB,K,6DCJT,MAA0B,qCCA1B,MAA0B,mCCA1B,MAA0B,oC,gBCmE1BC,MA1Df,WAAgB,IAAD,EACyBC,IAAMC,SAAS,CAC/CC,OAAQC,OAAOC,YACfC,MAAOF,OAAOG,aAHP,mBACJC,EADI,KACQC,EADR,KAiBX,OAXAR,IAAMS,WAAU,WAQZN,OAAOO,iBAAiB,UAPxB,WACIF,EAAc,CACVN,OAAQC,OAAOC,YACfC,MAAOF,OAAOG,mBAQtB,eAAC,IAAD,CAAgBZ,MAAOA,EAAvB,UACI,eAAC,IAAD,CAAKiB,UAAU,SAASC,SAAS,KAAjC,UACI,cAAC,IAAD,CAAMC,KAAK,QAAQC,EAAG,EAAGC,eAAgB,SAAUC,aAAc,SAAjE,SACI,eAAC,IAAD,CAAQC,QAAS,GAAIC,UAAW,SAAhC,UACI,eAAC,IAAD,CAAQD,QAAS,EAAjB,UACI,cAAC,IAAD,CAAME,MAAO,CAACP,SAAU,GAAIQ,WAAY,SAAUC,MAAO,WAAzD,iCAGA,eAAC,IAAD,CAAQJ,QAAS,EAAjB,UACI,mBAAGK,KAAK,6BAAR,SACI,cAAC,IAAD,CAAOC,IAAKC,EAAQL,MAAO,CAACjB,OAAQ,GAAIG,MAAO,IAAKoB,MAAO,iBAG/D,mBAAGH,KAAK,gCAAR,SACI,cAAC,IAAD,CAAOC,IAAKG,EAASP,MAAO,CAACjB,OAAQ,GAAIG,MAAO,IAAKoB,MAAO,uBAKvElB,EAAWF,MAAQ,IACd,cAAC,IAAD,CAAOkB,IAAKI,EAAKC,IAAI,MAAMT,MAAO,CAACjB,OAAQ,IAAKG,MAAO,IAAKwB,aAAc,OAC1E,4BAKd,cAAC,IAAD,UACI,cAAC,IAAD,CAAMV,MAAO,CAACP,SAAU,GAAIQ,WAAY,aAAxC,oFAMR,uBAEA,cAAC,IAAD,CAAMU,MAAO,SAAUV,WAAY,YAAnC,4DClDGW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKMQ,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACL,eAAC,IAAD,WACI,cAAC,IAAD,CAAiBhD,iBAAkBH,EAAME,OAAOC,mBAChD,cAAC,IAAD,CAAOiD,OAAK,EAACC,KAAK,IAAIC,UAAWjD,OAQrCkD,SAASC,eAAe,SD8GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,YCxG5B5B,M","file":"static/js/main.20af625f.chunk.js","sourcesContent":["import { extendTheme } from \"@chakra-ui/react\"\r\n\r\nconst config = {\r\n    initialColorMode: \"dark\",\r\n    useSystemColorMode: false,\r\n}\r\n\r\nconst theme = extendTheme({ config })\r\nexport default theme;\r\n","export default __webpack_public_path__ + \"static/media/moq-blue.d96b8303.gif\";","export default __webpack_public_path__ + \"static/media/github.944a3b51.svg\";","export default __webpack_public_path__ + \"static/media/discord.910dec7f.svg\";","import React from 'react';\nimport {ChakraProvider, Box, Text, Image, HStack, VStack, Grid} from '@chakra-ui/react';\n\nimport moq from \"./moq-blue.gif\";\nimport github from \"./github.svg\";\nimport discord from \"./discord.svg\";\nimport theme from \"./theme\";\nimport \"./App.css\";\n\nfunction App() {\n    const [dimensions, setDimensions] = React.useState({\n        height: window.innerHeight,\n        width: window.innerWidth\n    })\n\n    React.useEffect(() => {\n        function handleResize() {\n            setDimensions({\n                height: window.innerHeight,\n                width: window.innerWidth\n            })\n        }\n\n        window.addEventListener('resize', handleResize)\n    })\n\n    return (\n        <ChakraProvider theme={theme}>\n            <Box textAlign=\"center\" fontSize=\"xl\">\n                <Grid minH=\"100vh\" p={3} justifyContent={\"center\"} justifyItems={\"center\"}>\n                    <HStack spacing={30} alignSelf={\"center\"}>\n                        <VStack spacing={2}>\n                            <Text style={{fontSize: 80, fontFamily: \"Ubuntu\", color: \"#f1fff8\"}}>Hello, I'm\n                                Moquent!</Text>\n\n                            <HStack spacing={5}>\n                                <a href=\"https://github.com/Moquent\">\n                                    <Image src={github} style={{height: 60, width: 60}} class={\"imageHover\"}/>\n                                </a>\n\n                                <a href=\"https://discord.gg/623552jtcz\">\n                                    <Image src={discord} style={{height: 65, width: 65}} class={\"imageHover\"}/>\n                                </a>\n                            </HStack>\n                        </VStack>\n\n                        {dimensions.width > 600\n                            ? <Image src={moq} alt=\"Moq\" style={{height: 500, width: 500, borderRadius: 300}}/>\n                            : <br/>\n                        }\n                    </HStack>\n                </Grid>\n\n                <Grid>\n                    <Text style={{fontSize: 30, fontFamily: \"Fira Sans\"}}>I'm a 15 year old guy who loves coding and\n                        computers üòÉ\n                    </Text>\n                </Grid>\n            </Box>\n\n            <br/>\n\n            <Text align={\"center\"} fontFamily={\"Maven Pro\"}>This website was made with ‚ù§ in React</Text>\n        </ChakraProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {ColorModeScript} from \"@chakra-ui/react\";\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\n\nimport theme from \"./theme\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router>\n        <ColorModeScript initialColorMode={theme.config.initialColorMode}/>\n        <Route exact path=\"/\" component={App}/>\n        {/*<Route exact path=\"/github\" component={() => {*/}\n        {/*    window.location.href = \"https://github.com/Moquent\";*/}\n        {/*}}/>*/}\n        {/*<Route exact path=\"/discord\" component={() => {*/}\n        {/*    window.location.href = \"https://discord.gg/623552jtcz\";*/}\n        {/*}}/>*/}\n    </Router>,\n    document.getElementById('root')\n)\n;\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}